/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import Control.ControlBD;
import com.mysql.jdbc.ResultSet;
import com.mysql.jdbc.Statement;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ANIBAL
 */
public class Factura extends javax.swing.JPanel {

    ControlBD  enlace  = new ControlBD();
    Connection conect = enlace.conectar();
    public Factura() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tablafacturas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btnservicios = new javax.swing.JButton();
        btnhabitacion = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnTotales = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Tablafacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Tablafacturas);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 550, 270));

        jButton1.setText("IMPRIMIR");
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, -1, -1));

        btnservicios.setText("SERVICIOS ");
        btnservicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnserviciosActionPerformed(evt);
            }
        });
        add(btnservicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, -1, -1));

        btnhabitacion.setText("HABITACION");
        btnhabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhabitacionActionPerformed(evt);
            }
        });
        add(btnhabitacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 350, -1, -1));

        jButton4.setText("ELIMINAR");
        add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 350, -1, -1));

        btnTotales.setText("TOTALES");
        btnTotales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalesActionPerformed(evt);
            }
        });
        add(btnTotales, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 350, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnserviciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnserviciosActionPerformed
    String sql = "SELECT IdentificacionHuesped, SUM(PrecioServicio * CantidadPedido) AS TotalCosto "
               + "FROM pedido JOIN servicio ON pedido.CodigoServicio = servicio.CodigoServicio "
               + "GROUP BY IdentificacionHuesped "
               + "ORDER BY TotalCosto DESC";

    DefaultTableModel model = (DefaultTableModel) Tablafacturas.getModel();
    model.setRowCount(0);  // Limpiar la tabla antes de añadir nuevos datos
    
    // Establecer nombres de columnas
    model.setColumnIdentifiers(new Object[]{"IdentificacionHuesped", "TotalCosto"});

    try (Statement st = (Statement) conect.createStatement();
         ResultSet rs = (ResultSet) st.executeQuery(sql)) {
        while (rs.next()) {
            int identificacionHuesped = rs.getInt("IdentificacionHuesped");
            double totalCosto = rs.getDouble("TotalCosto");
            model.addRow(new Object[]{identificacionHuesped, totalCosto});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al recuperar los datos: " + e.toString());
    }  
    }//GEN-LAST:event_btnserviciosActionPerformed

    private void btnhabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhabitacionActionPerformed
   String sql = "SELECT Habitacion.CodigoHabitacion, Huesped.IdentificacionHuesped, "
               + "DATEDIFF(Huesped.FechaSalida, Huesped.FechaIngreso) AS CantidadDias, "
               + "Habitacion.PrecioPorDia, "
               + "(DATEDIFF(Huesped.FechaSalida, Huesped.FechaIngreso) * Habitacion.PrecioPorDia) AS TotalCosto "
               + "FROM Habitacion "
               + "JOIN Huesped ON Habitacion.CodigoHabitacion = Huesped.CodigoHabitacion "
               + "WHERE Habitacion.EstadoHabitacion = 'ocupado'";

    DefaultTableModel model = (DefaultTableModel) Tablafacturas.getModel();
    model.setRowCount(0);  // Limpiar la tabla antes de añadir nuevos datos
    
    // Establecer nombres de columnas
    model.setColumnIdentifiers(new Object[]{"CodigoHabitacion", "IdentificacionHuesped", "CantidadDias", "PrecioPorDia", "TotalCosto"});

    try (Statement st = (Statement) conect.createStatement();
         ResultSet rs = (ResultSet) st.executeQuery(sql)) {
        while (rs.next()) {
            int codigoHabitacion = rs.getInt("CodigoHabitacion");
            int identificacionHuesped = rs.getInt("IdentificacionHuesped");
            int cantidadDias = rs.getInt("CantidadDias");
            double precioPorDia = rs.getDouble("PrecioPorDia");
            double totalCosto = rs.getDouble("TotalCosto");
            model.addRow(new Object[]{codigoHabitacion, identificacionHuesped, cantidadDias, precioPorDia, totalCosto});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al recuperar los datos: " + e.toString());
    }  
    }//GEN-LAST:event_btnhabitacionActionPerformed

    private void btnTotalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalesActionPerformed
     String sql = "SELECT Huesped.IdentificacionHuesped, "
               + "COALESCE(SUM(Pedido.CobroTotalServicios), 0) AS TotalServicios, "
               + "(Habitacion.PrecioPorDia * DATEDIFF(Huesped.FechaSalida, Huesped.FechaIngreso)) AS TotalHabitacion "
               + "FROM Huesped "
               + "JOIN Habitacion ON Huesped.CodigoHabitacion = Habitacion.CodigoHabitacion "
               + "LEFT JOIN Pedido ON Huesped.IdentificacionHuesped = Pedido.IdentificacionHuesped "
               + "WHERE Habitacion.EstadoHabitacion = 'OCUPADO' "
               + "GROUP BY Huesped.IdentificacionHuesped";

    DefaultTableModel model = (DefaultTableModel) Tablafacturas.getModel();
    model.setRowCount(0);  // Limpiar la tabla antes de añadir nuevos datos
    
    // Establecer nombres de columnas
    model.setColumnIdentifiers(new Object[]{"IdentificacionHuesped", "TotalServicios", "TotalHabitacion", "TotalGeneral"});

    try (Statement st = (Statement) conect.createStatement();
         ResultSet rs = (ResultSet) st.executeQuery(sql)) {
        while (rs.next()) {
            int identificacionHuesped = rs.getInt("IdentificacionHuesped");
            double totalServicios = rs.getDouble("TotalServicios");
            double totalHabitacion = rs.getDouble("TotalHabitacion");
            double totalGeneral = totalServicios + totalHabitacion;
            model.addRow(new Object[]{identificacionHuesped, totalServicios, totalHabitacion, totalGeneral});
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al recuperar los datos: " + e.toString());
    }  
    }//GEN-LAST:event_btnTotalesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tablafacturas;
    private javax.swing.JButton btnTotales;
    private javax.swing.JButton btnhabitacion;
    private javax.swing.JButton btnservicios;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
