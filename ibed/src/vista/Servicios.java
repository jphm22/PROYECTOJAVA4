/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import Control.ControlBD;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.ResultSet;
import com.mysql.jdbc.Statement;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ANIBAL
 */
public class Servicios extends javax.swing.JPanel {

    ControlBD  enlace  = new ControlBD();
    Connection conect = enlace.conectar();
    public Servicios() {
        initComponents();
    }
    private void mostrarPedidos() {
    // Consulta SQL para obtener todos los pedidos
    String sqlSelectPedidos = "SELECT * FROM pedido";
    Statement st;
    DefaultTableModel model = new DefaultTableModel();

    // Definir las columnas del modelo de la tabla
    model.addColumn("CodigoPedido");
    model.addColumn("IdentificacionHuesped");
    model.addColumn("CodigoServicio");
    model.addColumn("CodigoEmpleado");
    model.addColumn("CantidadPedido");
    model.addColumn("CobroTotalServicios");

    // Asignar el modelo a la tablaPedido
    tablapedidos.setModel(model);

    String[] datos = new String[6];

    try {
        st = (Statement) conect.createStatement();
        ResultSet rs = (ResultSet) st.executeQuery(sqlSelectPedidos);

        while (rs.next()) {
            datos[0] = rs.getString("CodigoPedido");
            datos[1] = rs.getString("IdentificacionHuesped");
            datos[2] = rs.getString("CodigoServicio");
            datos[3] = rs.getString("CodigoEmpleado");
            datos[4] = rs.getString("CantidadPedido");
            datos[5] = rs.getString("CobroTotalServicios");
            model.addRow(datos);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al mostrar los pedidos: " + e.toString());
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtcod = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablapedidos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtdescri = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtprecio = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtcantidad = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtidenh = new javax.swing.JTextField();
        txtnomH = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnMP = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtCodE = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtnomE = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txttotal = new javax.swing.JTextField();
        btnTP = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(920, 450));

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("CODIGO");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));
        jPanel1.add(txtcod, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 80, -1));

        tablapedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablapedidos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 810, 170));

        jLabel2.setText("Descripcion");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, -1, -1));
        jPanel1.add(txtdescri, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 180, -1));

        jLabel3.setText("Precio");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, -1, -1));
        jPanel1.add(txtprecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, 130, -1));

        jLabel4.setText("Cantidad");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 60, -1, -1));
        jPanel1.add(txtcantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 80, 110, -1));

        jLabel5.setText("IDENTIFICACION");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, -1, -1));

        jLabel6.setText("Nombre");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 380, -1, -1));
        jPanel1.add(txtidenh, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 350, 110, -1));
        jPanel1.add(txtnomH, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 350, 200, -1));

        btnGuardar.setText("GUARDAR PEDIDO");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 360, 160, -1));

        btnMP.setText("CONSULTAR PEDIDO");
        btnMP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMPActionPerformed(evt);
            }
        });
        jPanel1.add(btnMP, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 330, 160, -1));

        btnEliminar.setText("ELIMINAR PERDIDO");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 390, 160, -1));

        jLabel7.setText("CODIGO EMPLEADO");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 380, -1, -1));
        jPanel1.add(txtCodE, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, 110, -1));

        jLabel8.setText("Nombre");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 330, -1, -1));
        jPanel1.add(txtnomE, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 400, 200, -1));

        jLabel9.setText("TOTAL");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 60, -1, -1));
        jPanel1.add(txttotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 80, 90, -1));

        btnTP.setText("TODOS LOS PEDIDOS");
        btnTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTPActionPerformed(evt);
            }
        });
        jPanel1.add(btnTP, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 360, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnMPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMPActionPerformed
                                     
    // Obtener el código del servicio, la identificación del huésped y el código del empleado
    int codigoServicio = Integer.parseInt(txtcod.getText());
    int identificacionHuesped = Integer.parseInt(txtidenh.getText());
    int cantidadSolicitada = Integer.parseInt(txtcantidad.getText());
    int codigoEmpleado = Integer.parseInt(txtCodE.getText());
    // Consulta SQL para obtener los detalles del servicio
    String sqlServicio = "SELECT DescripcionServicio, PrecioServicio FROM servicio WHERE CodigoServicio = ?";
    // Consulta SQL para obtener el nombre del huésped
    String sqlHuesped = "SELECT Nombre FROM huesped WHERE IdentificacionHuesped = ?";
    // Consulta SQL para obtener el nombre del empleado
    String sqlEmpleado = "SELECT Nombre FROM empleado WHERE CodigoEmpleado = ?";

    try {
        // Obtener los detalles del servicio
        PreparedStatement pstServicio = (PreparedStatement)conect.prepareStatement(sqlServicio);
        pstServicio.setInt(1, codigoServicio);
        ResultSet rsServicio = (ResultSet)pstServicio.executeQuery();

        if (rsServicio.next()) {
            String descripcionServicio = rsServicio.getString("DescripcionServicio");
            double precioServicio = rsServicio.getDouble("PrecioServicio");

            // Rellenar los campos de descripción y precio
            txtdescri.setText(descripcionServicio);
            txtprecio.setText(String.valueOf(precioServicio));

            // Calcular el total
            double total = precioServicio * cantidadSolicitada;
            txttotal.setText(String.valueOf(total));
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el servicio con el código proporcionado.");
        }

        // Obtener el nombre del huésped
        PreparedStatement pstHuesped = (PreparedStatement)conect.prepareStatement(sqlHuesped);
        pstHuesped.setInt(1, identificacionHuesped);
        ResultSet rsHuesped = (ResultSet) pstHuesped.executeQuery();

        if (rsHuesped.next()) {
            String nombreHuesped = rsHuesped.getString("Nombre");

            // Rellenar el campo del nombre del huésped
            txtnomH.setText(nombreHuesped);
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el huésped con la identificación proporcionada.");
        }

        // Obtener el nombre del empleado
        PreparedStatement pstEmpleado = (PreparedStatement) conect.prepareStatement(sqlEmpleado);
        pstEmpleado.setInt(1, codigoEmpleado);
        ResultSet rsEmpleado = (ResultSet) pstEmpleado.executeQuery();

        if (rsEmpleado.next()) {
            String nombreEmpleado = rsEmpleado.getString("Nombre");

            // Rellenar el campo del nombre del empleado
            txtnomE.setText(nombreEmpleado);
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró el empleado con el código proporcionado.");
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al realizar la consulta: " + e.toString());
    }
    }//GEN-LAST:event_btnMPActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
    // Obtener los datos de los campos de texto
    int identificacionHuesped = Integer.parseInt(txtidenh.getText());
    int codigoServicio = Integer.parseInt(txtcod.getText());
    int codigoEmpleado = Integer.parseInt(txtCodE.getText());
    int cantidadPedido = Integer.parseInt(txtcantidad.getText());
    double cobroTotalServicios = Double.parseDouble(txttotal.getText());

    // Consulta SQL para insertar un nuevo pedido
    String sqlInsertPedido = "INSERT INTO pedido (IdentificacionHuesped, CodigoServicio, CodigoEmpleado, CantidadPedido, CobroTotalServicios) VALUES (?, ?, ?, ?, ?)";

    try {
        // Insertar el nuevo pedido en la base de datos
        PreparedStatement pstInsert = (PreparedStatement) conect.prepareStatement(sqlInsertPedido);
        pstInsert.setInt(1, identificacionHuesped);
        pstInsert.setInt(2, codigoServicio);
        pstInsert.setInt(3, codigoEmpleado);
        pstInsert.setInt(4, cantidadPedido);
        pstInsert.setDouble(5, cobroTotalServicios);
        pstInsert.executeUpdate();

        JOptionPane.showMessageDialog(null, "Pedido registrado con éxito.");

        // Mostrar todos los pedidos en la tablaPedido
        mostrarPedidos();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al registrar el pedido: " + e.toString());
    }


    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
       // Obtener el índice de la fila seleccionada
    int selectedRow = tablapedidos.getSelectedRow();
    if (selectedRow >= 0) {
        // Suponemos que el código del pedido es la primera columna del JTable
        int codigoPedido = Integer.parseInt(tablapedidos.getModel().getValueAt(selectedRow, 0).toString());

        // Consulta SQL para eliminar la fila seleccionada
        String sqlDelete = "DELETE FROM pedido WHERE CodigoPedido = ?";

        try (PreparedStatement pst = (PreparedStatement) conect.prepareStatement(sqlDelete)) {
            // Establecer el parámetro del código del pedido
            pst.setInt(1, codigoPedido);
            // Ejecutar la consulta de eliminación
            int affectedRows = pst.executeUpdate();
            if (affectedRows > 0) {
                JOptionPane.showMessageDialog(null, "Pedido eliminado con éxito.");

                // Eliminar la fila del modelo de la tabla después de eliminarla de la base de datos
                ((DefaultTableModel) tablapedidos.getModel()).removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(null, "El pedido no se encontró.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al eliminar el pedido: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione una fila para eliminar.");
    }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTPActionPerformed
    mostrarPedidos();
    }//GEN-LAST:event_btnTPActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnMP;
    private javax.swing.JButton btnTP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablapedidos;
    private javax.swing.JTextField txtCodE;
    private javax.swing.JTextField txtcantidad;
    private javax.swing.JTextField txtcod;
    private javax.swing.JTextField txtdescri;
    private javax.swing.JTextField txtidenh;
    private javax.swing.JTextField txtnomE;
    private javax.swing.JTextField txtnomH;
    private javax.swing.JTextField txtprecio;
    private javax.swing.JTextField txttotal;
    // End of variables declaration//GEN-END:variables
}
